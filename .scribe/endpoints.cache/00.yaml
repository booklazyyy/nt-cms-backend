## Autogenerated by Scribe. DO NOT MODIFY.

name: Authenticate
description: |-

  APIs for Authenticate
endpoints:
  -
    httpMethods:
      - POST
    uri: api/v1/register
    metadata:
      groupName: Authenticate
      groupDescription: |-

        APIs for Authenticate
      subgroup: ''
      subgroupDescription: ''
      title: 'Create a new user'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'Must not be greater than 255 characters.'
        required: true
        example: ntdvxidaompzawprtty
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      email:
        name: email
        description: 'Must be a valid email address. Must not be greater than 255 characters.'
        required: true
        example: krajcik.quinn@example.org
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      password:
        name: password
        description: 'Must not be greater than 20 characters.'
        required: true
        example: '9tfIAdiLhAU:'
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      name: ntdvxidaompzawprtty
      email: krajcik.quinn@example.org
      password: '9tfIAdiLhAU:'
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/auth/login
    metadata:
      groupName: Authenticate
      groupDescription: |-

        APIs for Authenticate
      subgroup: ''
      subgroupDescription: ''
      title: 'Sign in a user'
      description: 'Get a JWT via given credentials.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'Must be a valid email address. The <code>email</code> of an existing record in the App\Models\User table.'
        required: true
        example: jakayla71@example.org
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      password:
        name: password
        description: ''
        required: true
        example: perspiciatis
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      email: jakayla71@example.org
      password: perspiciatis
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/auth/refresh
    metadata:
      groupName: Authenticate
      groupDescription: |-

        APIs for Authenticate
      subgroup: ''
      subgroupDescription: ''
      title: 'Refresh Token'
      description: 'Get a new JWT Token via given refresh token and old access token.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 4eEDagb5a61kcd3ZfvP68Vh'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: api/v1/auth/logout
    metadata:
      groupName: Authenticate
      groupDescription: |-

        APIs for Authenticate
      subgroup: ''
      subgroupDescription: ''
      title: 'Sign out a user'
      description: 'This endpoint lets you logout and destroy a token.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer k3Z66e4v1hV85aPacDdfbgE'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/auth/me
    metadata:
      groupName: Authenticate
      groupDescription: |-

        APIs for Authenticate
      subgroup: ''
      subgroupDescription: ''
      title: 'Get a user'
      description: 'This endpoint lets you get a user.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"error":"Unauthorized","code":401,"message":"Wrong number of segments"}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          vary: Origin
        description: null
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer Pb6hcD5kgE4f681aeZvd3Va'
    controller: null
    method: null
    route: null
    custom: []
